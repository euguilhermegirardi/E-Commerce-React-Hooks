{"ast":null,"code":"import _defineProperty from \"/Users/girardi.gui/Desktop/React-Class-Components/e-commerce-class-component/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Redux-Saga has the middlewares that intercept the action to get more information.\n// When the action is triggered it will get some info from the API to show in the product info (home), for example...\n// the middleware intercept this action and get more info to put in the cart, for example, weight of the product, stock and more...\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\nimport { toast } from 'react-toastify'; // function* = 'generator' = async / yield = await.\n// call = to get the info from api.\n// put = to trigger an action.\n// 'id' from Home/index.js.\n\nfunction* addToCart({\n  id\n}) {\n  const productExists = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, \"/stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount : 0;\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Out of stock!');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, \"/products/\".concat(id));\n\n    const data = _objectSpread({}, response.data, {\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    });\n\n    yield put(addToCartSuccess(data));\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, \"stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Out of stock!');\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n} // all = to register many listeners.\n// takeLatest = To control when the user clicks too fast in the button.\n// ...it will register only one click.\n\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCart), takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount)]);","map":{"version":3,"sources":["/Users/girardi.gui/Desktop/React-Class-Components/e-commerce-class-component/src/store/modules/cart/sagas.js"],"names":["api","history","call","select","put","all","takeLatest","addToCartSuccess","updateAmountSuccess","formatPrice","toast","addToCart","id","productExists","state","cart","find","p","stock","get","stockAmount","data","amount","currentAmount","error","response","priceFormatted","price","push","updateAmount"],"mappings":";;;;;;AAAA;AACA;AACA;AAEA,OAAOA,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAmD,oBAAnD;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CAEA;AACA;AACA;AACA;;AACA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AAC1B,QAAMC,aAAa,GAAG,MAAMV,MAAM,CAChCW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CADuB,CAAlC;AAIA,QAAMM,KAAK,GAAG,MAAMhB,IAAI,CAACF,GAAG,CAACmB,GAAL,mBAAoBP,EAApB,EAAxB;AAEA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;AAEA,QAAMC,aAAa,GAAGV,aAAa,GAAGA,aAAa,CAACS,MAAjB,GAA0B,CAA7D;AAEA,QAAMA,MAAM,GAAGC,aAAa,GAAG,CAA/B;;AAEA,MAAID,MAAM,GAAGF,WAAb,EAA0B;AACxBV,IAAAA,KAAK,CAACc,KAAN,CAAY,eAAZ;AACA;AACD;;AAED,MAAIX,aAAJ,EAAmB;AAEjB,UAAMT,GAAG,CAACI,mBAAmB,CAACI,EAAD,EAAKU,MAAL,CAApB,CAAT;AAED,GAJD,MAIO;AACL,UAAMG,QAAQ,GAAG,MAAMvB,IAAI,CAACF,GAAG,CAACmB,GAAL,sBAAuBP,EAAvB,EAA3B;;AAEA,UAAMS,IAAI,qBACLI,QAAQ,CAACJ,IADJ;AAERC,MAAAA,MAAM,EAAE,CAFA;AAGRI,MAAAA,cAAc,EAAEjB,WAAW,CAACgB,QAAQ,CAACJ,IAAT,CAAcM,KAAf;AAHnB,MAAV;;AAMA,UAAMvB,GAAG,CAACG,gBAAgB,CAACc,IAAD,CAAjB,CAAT;AACApB,IAAAA,OAAO,CAAC2B,IAAR,CAAa,OAAb;AACD;AACF;;AAED,UAAUC,YAAV,CAAuB;AAAEjB,EAAAA,EAAF;AAAMU,EAAAA;AAAN,CAAvB,EAAuC;AACrC,MAAIA,MAAM,IAAI,CAAd,EAAiB;AAEjB,QAAMJ,KAAK,GAAG,MAAMhB,IAAI,CAACF,GAAG,CAACmB,GAAL,kBAAmBP,EAAnB,EAAxB;AAEA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;;AAEA,MAAIA,MAAM,GAAGF,WAAb,EAA0B;AACxBV,IAAAA,KAAK,CAACc,KAAN,CAAY,eAAZ;AACA;AACD;;AAED,QAAMpB,GAAG,CAACI,mBAAmB,CAACI,EAAD,EAAKU,MAAL,CAApB,CAAT;AACD,C,CAED;AACA;AACA;;;AACA,eAAejB,GAAG,CAAC,CACjBC,UAAU,CAAC,mBAAD,EAAsBK,SAAtB,CADO,EAEjBL,UAAU,CAAC,6BAAD,EAAgCuB,YAAhC,CAFO,CAAD,CAAlB","sourcesContent":["// Redux-Saga has the middlewares that intercept the action to get more information.\n// When the action is triggered it will get some info from the API to show in the product info (home), for example...\n// the middleware intercept this action and get more info to put in the cart, for example, weight of the product, stock and more...\n\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\nimport { toast } from 'react-toastify';\n\n// function* = 'generator' = async / yield = await.\n// call = to get the info from api.\n// put = to trigger an action.\n// 'id' from Home/index.js.\nfunction* addToCart({ id }) {\n  const productExists = yield select(\n    state => state.cart.find(p => p.id === id),\n  );\n\n  const stock = yield call(api.get, `/stock/${id}`);\n\n  const stockAmount = stock.data.amount;\n\n  const currentAmount = productExists ? productExists.amount : 0;\n\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Out of stock!')\n    return;\n  }\n\n  if (productExists) {\n\n    yield put(updateAmountSuccess(id, amount))\n\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n\n    const data = {\n      ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price),\n    }\n\n    yield put(addToCartSuccess(data));\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmount({ id, amount }) {\n  if (amount <= 0) return;\n\n  const stock = yield call(api.get, `stock/${id}`);\n\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Out of stock!')\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\n// all = to register many listeners.\n// takeLatest = To control when the user clicks too fast in the button.\n// ...it will register only one click.\nexport default all([\n  takeLatest('@cart/ADD_REQUEST', addToCart),\n  takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount)\n])\n"]},"metadata":{},"sourceType":"module"}