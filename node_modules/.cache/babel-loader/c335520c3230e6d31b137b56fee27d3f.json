{"ast":null,"code":"// Index.js (Home) connected with Redux.\n// Component triggers an action, the action tells to the Reducer...\n// Reducer edit whatever it needs, then Redux send the new information to all components that need it.\nimport produce from 'immer'; // Initial state as an empty array and receive the action.\n\nexport default function cart(state = [], action) {\n  // Created \"switch\" cos the \"cart reducer\" wants to listen only the actions about the cart.\n  switch (action.type) {\n    case '@cart/ADD_SUCCESS':\n      // draft is a copy of the state.\n      return produce(state, draft => {\n        const product = action.product;\n        draft.push(product);\n      });\n\n    case '@cart/REMOVE':\n      return produce(state, draft => {\n        const productIndex = draft.findIndex(p => p.id === action.id); // To remove the product.\n        // 'splice' to remove. 'productIndex' to get the product. '1' quant. that you will delete.\n\n        if (productIndex >= 0) {\n          draft.splice(productIndex, 1);\n        }\n      });\n\n    case '@cart/UPDATE_AMOUNT_SUCCESS':\n      {\n        return produce(state, draft => {\n          const productIndex = draft.findIndex(p => p.id === action.id);\n\n          if (productIndex >= 0) {\n            draft[productIndex].amount = Number(action.amount);\n          }\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/girardi.gui/Desktop/React-Class-Components/e-commerce-class-component/src/store/modules/cart/reducer.js"],"names":["produce","cart","state","action","type","draft","product","push","productIndex","findIndex","p","id","splice","amount","Number"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,OAApB,C,CAEA;;AACA,eAAe,SAASC,IAAT,CAAcC,KAAK,GAAG,EAAtB,EAA0BC,MAA1B,EAAkC;AAC/C;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AACE;AACA,aAAOJ,OAAO,CAACE,KAAD,EAAQG,KAAK,IAAI;AAAA,cACrBC,OADqB,GACTH,MADS,CACrBG,OADqB;AAE7BD,QAAAA,KAAK,CAACE,IAAN,CAAWD,OAAX;AACD,OAHa,CAAd;;AAKF,SAAK,cAAL;AACE,aAAON,OAAO,CAACE,KAAD,EAAQG,KAAK,IAAI;AAC7B,cAAMG,YAAY,GAAGH,KAAK,CAACI,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASR,MAAM,CAACQ,EAArC,CAArB,CAD6B,CAG7B;AACA;;AACA,YAAIH,YAAY,IAAI,CAApB,EAAuB;AACrBH,UAAAA,KAAK,CAACO,MAAN,CAAaJ,YAAb,EAA2B,CAA3B;AACD;AACF,OARa,CAAd;;AAUF,SAAK,6BAAL;AAAoC;AAClC,eAAOR,OAAO,CAACE,KAAD,EAAQG,KAAK,IAAI;AAC7B,gBAAMG,YAAY,GAAGH,KAAK,CAACI,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASR,MAAM,CAACQ,EAArC,CAArB;;AAEA,cAAIH,YAAY,IAAI,CAApB,EAAuB;AACrBH,YAAAA,KAAK,CAACG,YAAD,CAAL,CAAoBK,MAApB,GAA6BC,MAAM,CAACX,MAAM,CAACU,MAAR,CAAnC;AACD;AACF,SANa,CAAd;AAOD;;AAED;AACE,aAAOX,KAAP;AA9BJ;AAgCD","sourcesContent":["// Index.js (Home) connected with Redux.\n// Component triggers an action, the action tells to the Reducer...\n// Reducer edit whatever it needs, then Redux send the new information to all components that need it.\n\nimport produce from 'immer';\n\n// Initial state as an empty array and receive the action.\nexport default function cart(state = [], action) {\n  // Created \"switch\" cos the \"cart reducer\" wants to listen only the actions about the cart.\n  switch (action.type) {\n    case '@cart/ADD_SUCCESS':\n      // draft is a copy of the state.\n      return produce(state, draft => {\n        const { product } = action;\n        draft.push(product)\n      });\n\n    case '@cart/REMOVE':\n      return produce(state, draft => {\n        const productIndex = draft.findIndex(p => p.id === action.id)\n\n        // To remove the product.\n        // 'splice' to remove. 'productIndex' to get the product. '1' quant. that you will delete.\n        if (productIndex >= 0) {\n          draft.splice(productIndex, 1);\n        }\n      });\n\n    case '@cart/UPDATE_AMOUNT_SUCCESS': {\n      return produce(state, draft => {\n        const productIndex = draft.findIndex(p => p.id === action.id)\n\n        if (productIndex >= 0) {\n          draft[productIndex].amount = Number(action.amount);\n        }\n      });\n    }\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}