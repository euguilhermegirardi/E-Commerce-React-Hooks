{"ast":null,"code":"import _defineProperty from \"/Users/girardi.gui/Desktop/React-Class-Components/e-commerce-class-component/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport produce from 'immer'; // Initial state as an empty array and receive the action.\n\nexport default function cart(state = [], action) {\n  // Created \"switch\" cos the \"cart reducer\" wants to listen only the actions about the cart.\n  switch (action.type) {\n    case '@cart/ADD_SUCCESS':\n      return produce(state, draft => {\n        const productIndex = draft.findIndex(p => p.id === action.product.id);\n\n        if (productIndex >= 0) {\n          draft[productIndex].amount += 1;\n        } else {\n          draft.push(_objectSpread({}, action.product, {\n            amount: 1\n          }));\n        }\n      });\n\n    case '@cart/REMOVE':\n      return produce(state, draft => {\n        const productIndex = draft.findIndex(p => p.id === action.id);\n\n        if (productIndex >= 0) {\n          draft.splice(productIndex, 1);\n        }\n      });\n\n    case '@cart/UPDATE_AMOUNT':\n      {\n        if (action.amount <= 0) {\n          return state;\n        }\n\n        return produce(state, draft => {\n          const productIndex = draft.findIndex(p => p.id === action.id);\n\n          if (productIndex >= 0) {\n            draft[productIndex].amount = Number(action.amount);\n          }\n        });\n      }\n\n    default:\n      return state;\n  }\n} // Index.js (Home) connected with Redux.\n// Component triggers an action, the action tells to the Reducer...\n// Reducer edit whatever it needs, then Redux send the new information to all components that need it.","map":{"version":3,"sources":["/Users/girardi.gui/Desktop/React-Class-Components/e-commerce-class-component/src/store/modules/cart/reducer.js"],"names":["produce","cart","state","action","type","draft","productIndex","findIndex","p","id","product","amount","push","splice","Number"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,OAApB,C,CAEA;;AACA,eAAe,SAASC,IAAT,CAAcC,KAAK,GAAG,EAAtB,EAA0BC,MAA1B,EAAkC;AAC/C;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AACE,aAAOJ,OAAO,CAACE,KAAD,EAAQG,KAAK,IAAI;AAC7B,cAAMC,YAAY,GAAGD,KAAK,CAACE,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAAP,CAAeD,EAA7C,CAArB;;AAEA,YAAIH,YAAY,IAAI,CAApB,EAAuB;AACrBD,UAAAA,KAAK,CAACC,YAAD,CAAL,CAAoBK,MAApB,IAA8B,CAA9B;AACD,SAFD,MAEO;AACLN,UAAAA,KAAK,CAACO,IAAN,mBACKT,MAAM,CAACO,OADZ;AAEEC,YAAAA,MAAM,EAAE;AAFV;AAID;AACF,OAXa,CAAd;;AAaF,SAAK,cAAL;AACE,aAAOX,OAAO,CAACE,KAAD,EAAQG,KAAK,IAAI;AAC7B,cAAMC,YAAY,GAAGD,KAAK,CAACE,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACM,EAArC,CAArB;;AAEA,YAAIH,YAAY,IAAI,CAApB,EAAuB;AACrBD,UAAAA,KAAK,CAACQ,MAAN,CAAaP,YAAb,EAA2B,CAA3B;AACD;AACF,OANa,CAAd;;AAQF,SAAK,qBAAL;AAA4B;AAC1B,YAAIH,MAAM,CAACQ,MAAP,IAAiB,CAArB,EAAwB;AACtB,iBAAOT,KAAP;AACD;;AAED,eAAOF,OAAO,CAACE,KAAD,EAAQG,KAAK,IAAI;AAC7B,gBAAMC,YAAY,GAAGD,KAAK,CAACE,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACM,EAArC,CAArB;;AAEA,cAAIH,YAAY,IAAI,CAApB,EAAuB;AACrBD,YAAAA,KAAK,CAACC,YAAD,CAAL,CAAoBK,MAApB,GAA6BG,MAAM,CAACX,MAAM,CAACQ,MAAR,CAAnC;AACD;AACF,SANa,CAAd;AAOD;;AAED;AACE,aAAOT,KAAP;AAvCJ;AAyCD,C,CAED;AACA;AACA","sourcesContent":["import produce from 'immer';\n\n// Initial state as an empty array and receive the action.\nexport default function cart(state = [], action) {\n  // Created \"switch\" cos the \"cart reducer\" wants to listen only the actions about the cart.\n  switch (action.type) {\n    case '@cart/ADD_SUCCESS':\n      return produce(state, draft => {\n        const productIndex = draft.findIndex(p => p.id === action.product.id)\n\n        if (productIndex >= 0) {\n          draft[productIndex].amount += 1;\n        } else {\n          draft.push({\n            ...action.product,\n            amount: 1,\n          });\n        }\n      });\n\n    case '@cart/REMOVE':\n      return produce(state, draft => {\n        const productIndex = draft.findIndex(p => p.id === action.id)\n\n        if (productIndex >= 0) {\n          draft.splice(productIndex, 1);\n        }\n      });\n\n    case '@cart/UPDATE_AMOUNT': {\n      if (action.amount <= 0) {\n        return state;\n      }\n\n      return produce(state, draft => {\n        const productIndex = draft.findIndex(p => p.id === action.id)\n\n        if (productIndex >= 0) {\n          draft[productIndex].amount = Number(action.amount);\n        }\n      });\n    }\n\n    default:\n      return state;\n  }\n}\n\n// Index.js (Home) connected with Redux.\n// Component triggers an action, the action tells to the Reducer...\n// Reducer edit whatever it needs, then Redux send the new information to all components that need it.\n"]},"metadata":{},"sourceType":"module"}