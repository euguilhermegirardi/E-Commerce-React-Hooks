{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nfunction _interopDefault(a) {\n  return a && \"object\" == typeof a && \"default\" in a ? a[\"default\"] : a;\n}\n\nvar reactotronCoreClient = require(\"reactotron-core-client\"),\n    StackTrace = _interopDefault(require(\"stacktrace-js\"));\n\nfunction _typeof(a) {\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (a) {\n    return typeof a;\n  } : function (a) {\n    return a && \"function\" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? \"symbol\" : typeof a;\n  }, _typeof(a);\n}\n\nvar CANNOT_RESOLVE_ERROR = \"Unable to resolve error.  Either support CORS by changing webpack's devtool to \\\"source-map\\\" or run in offline mode.\",\n    PLUGIN_DEFAULTS = {\n  offline: !1\n},\n    trackGlobalErrors = function (a) {\n  return function (b) {\n    function c(a, c, d, e, h) {\n      StackTrace.fromError(h, {\n        offline: f.offline\n      }).then(function (c) {\n        return b.error(a, c);\n      })[\"catch\"](function (f) {\n        return b.error({\n          message: CANNOT_RESOLVE_ERROR,\n          original: {\n            msg: a,\n            file: c,\n            line: d,\n            col: e,\n            error: h\n          },\n          resolvingError: f\n        });\n      }), g && g(a, c, d, e, h);\n    }\n\n    function d() {\n      h || (g = window.onerror, window.onerror = c, h = !0);\n    }\n\n    function e() {\n      g && (window.onerror = g, h = !1);\n    }\n\n    var f = Object.assign({}, PLUGIN_DEFAULTS, a || {}),\n        g = null,\n        h = !1;\n    return d(), {\n      features: {\n        trackGlobalErrors: d,\n        untrackGlobalErrors: e\n      }\n    };\n  };\n},\n    REACTOTRON_ASYNC_CLIENT_ID = \"@REACTOTRON/clientId\";\n\nfunction getNavigatorProperty(a) {\n  return a ? window ? window.navigator || \"object\" === _typeof(window.navigator) ? window.navigator[a] : void 0 : void 0 : void 0;\n}\n\nvar DEFAULTS = {\n  createSocket: function (a) {\n    return new WebSocket(a);\n  },\n  host: \"localhost\",\n  port: 9090,\n  name: \"React JS App\",\n  client: {\n    reactotronLibraryName: \"reactotron-react-js\",\n    reactotronLibraryVersion: \"2.1.1\",\n    platform: \"browser\",\n    platformVersion: getNavigatorProperty(\"platform\"),\n    userAgent: getNavigatorProperty(\"userAgent\"),\n    screenWidth: screen && screen.width || void 0,\n    screenHeight: screen && screen.height || void 0,\n    screenScale: window && window.devicePixelRatio || 1,\n    windowWidth: window && window.innerWidth || void 0,\n    windowHeight: window && window.innerHeight || void 0\n  },\n  getClientId: function () {\n    return Promise.resolve(localStorage.getItem(REACTOTRON_ASYNC_CLIENT_ID));\n  },\n  setClientId: function (a) {\n    return localStorage.setItem(REACTOTRON_ASYNC_CLIENT_ID, a), Promise.resolve();\n  }\n},\n    index = reactotronCoreClient.createClient(DEFAULTS);\nexports.default = index, exports.trackGlobalErrors = trackGlobalErrors;","map":null,"metadata":{},"sourceType":"script"}